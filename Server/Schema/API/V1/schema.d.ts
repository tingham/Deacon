/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = Record<string, never>;

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /**
       * Format: uuid
       * @description The unique identifier of the user.
       */
      id?: string;
      /** @description The name of the user. */
      name?: string;
      /** @description The email of the user. */
      email?: string;
      /** @description The password of the user. */
      password?: string;
      /**
       * Format: date-time
       * @description The date and time the user was created.
       */
      created?: string;
      /**
       * Format: date-time
       * @description The date and time the user was last updated.
       */
      updated?: string;
    };
    Thing: {
      /**
       * Format: uuid
       * @description The unique identifier of the thing.
       */
      id?: string;
      /** @description The name of the thing. */
      name?: string;
      /** @description The description of the thing. */
      description?: string;
      /**
       * Format: date-time
       * @description The date and time the thing was created.
       */
      created?: string;
      /**
       * Format: date-time
       * @description The date and time the thing was last updated.
       */
      updated?: string;
      /**
       * Format: uuid
       * @description The unique identifier of the author of the thing.
       */
      authorid?: string;
    };
    Document: {
      /** @description The type of the document. */
      type?: string;
    } & components["schemas"]["Thing"];
    Component: {
      /** @description The ordinal of the component. */
      ordinal?: number;
    } & components["schemas"]["Thing"];
    Transform: {
      /** @description The X position of the transform. */
      x?: number;
      /** @description The Y position of the transform. */
      y?: number;
      /** @description The Z position of the transform. */
      z?: number;
      /** @description The width of the transform. */
      width?: number;
      /** @description The height of the transform. */
      height?: number;
      /** @description The depth of the transform. */
      depth?: number;
      /** @description The yaw of the transform. */
      yaw?: number;
      /** @description The pitch of the transform. */
      pitch?: number;
      /** @description The rolle of the transform. */
      roll?: number;
    } & components["schemas"]["Component"];
    Layer: {
      /** @description The key name of the layer */
      key?: string;
      /** @description The value of the layer encoded as json */
      value?: Record<string, never>;
    } & components["schemas"]["Thing"];
    Material: {
      Layers?: unknown[];
    } & components["schemas"]["Component"];
    Geometry: components["schemas"]["Component"];
    PrimitiveGeometry: {
      /** @description The type of the primitive. */
      type?: unknown;
    } & components["schemas"]["Geometry"];
    ArbitraryGeometry: {
      /** @description The vertices of the geometry. */
      vertices?: number[];
      /** @description The normals of the geometry. */
      normals?: number[];
      /** @description The uvs of the geometry. */
      uvs?: number[];
      /** @description The indices of the geometry. */
      indices?: number[];
    } & components["schemas"]["Geometry"];
    Element: {
      transform?: components["schemas"]["Transform"];
      material?: components["schemas"]["Material"];
      geometry?: components["schemas"]["Geometry"];
      children?: components["schemas"]["Element"][];
    } & components["schemas"]["Thing"];
    Scene: Record<string, never>;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
