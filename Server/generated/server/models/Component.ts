/* tslint:disable */
/* eslint-disable */
/**
 * Deacon
 * Deacon API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Component
 */
export interface Component {
    /**
     * The ordinal of the component.
     * @type {number}
     * @memberof Component
     */
    ordinal?: number;
    /**
     * The unique identifier of the thing.
     * @type {string}
     * @memberof Component
     */
    id?: string;
    /**
     * The name of the thing.
     * @type {string}
     * @memberof Component
     */
    name?: string;
    /**
     * The description of the thing.
     * @type {string}
     * @memberof Component
     */
    description?: string;
    /**
     * The date and time the thing was created.
     * @type {Date}
     * @memberof Component
     */
    created?: Date;
    /**
     * The date and time the thing was last updated.
     * @type {Date}
     * @memberof Component
     */
    updated?: Date;
    /**
     * The unique identifier of the author of the thing.
     * @type {string}
     * @memberof Component
     */
    authorid?: string;
}

/**
 * Check if a given object implements the Component interface.
 */
export function instanceOfComponent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ComponentFromJSON(json: any): Component {
    return ComponentFromJSONTyped(json, false);
}

export function ComponentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Component {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ordinal': !exists(json, 'ordinal') ? undefined : json['ordinal'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
        'authorid': !exists(json, 'authorid') ? undefined : json['authorid'],
    };
}

export function ComponentToJSON(value?: Component | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ordinal': value.ordinal,
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'updated': value.updated === undefined ? undefined : (value.updated.toISOString()),
        'authorid': value.authorid,
    };
}

